model Slats4U
uses "mmxprs"
declarations
	NMonths = 12
	Months = 1..NMonths
	Products: set of string

	MonthNames: array(Months) of string
	Profit: array(Products) of real
	Demand: array(Products, Months) of real
	StorageSpace: array(Products) of real

	Capacity: real
	WarehouseSize: real

	Make: array(Products, Months) of mpvar
	Sell: array(Products, Months) of mpvar
	Stock: array(Products, Months) of mpvar
	Store: array(Products, Months) of mpvar
end-declarations

initialisations from "Slats4U.dat"
	Products
	MonthNames
	Profit Capacity Demand
	StorageSpace WarehouseSize
end-initialisations

forall(p in Products, m in Months) DemandCS(p, m) := Sell(p, m) <= Demand(p, m)
forall(m in Months) do
	Production(m) := sum(p in Products) Make(p, m)
	CapacityCS(m) := Production(m) <= Capacity
end-do

forall(p in Products, m in Months) do
	if m = 1 then
		InventoryCS(p, m) := Stock(p, m) = Stock(p, NMonths) + Make(p, m) - Sell(p, m)
	else
		InventoryCS(p, m) := Stock(p, m) = Stock(p, m-1)     + Make(p, m) - Sell(p, m)
	end-if
end-do

forall(m in Months) do
	SpaceUsed(m) := sum(p in Products) StorageSpace(p)*Stock(p, m)
	WarehouseCS(m) := SpaceUsed(m) <= WarehouseSize
end-do

TotalProfit := sum(p in Products, m in Months) Sell(p, m)*Profit(p)

maximize(TotalProfit)

forall(p in Products) do
	writeln
	writeln(p, ":")
	forall(m in Months) do
		write("In ", MonthNames(m), ": ")
		write("make ", strfmt(getsol(Make(p, m)),3), "; ")
		write("stock ", strfmt(getsol(Stock(p, m)),3), "; ")
		write("sell ", strfmt(getsol(Sell(p, m)),3), "; ")
		writeln
	end-do
end-do

writeln
forall(p in Products, m in Months) do
	UnsatisfiedDemand := getsol(Demand(p, m) - Sell(p, m))
	if UnsatisfiedDemand>0 then
		writeln("In ", MonthNames(m), " unsatisfied demand for ", strfmt(p, -7), " is ", strfmt(UnsatisfiedDemand, 3))
	end-if
end-do

writeln
forall(m in Months) do
	write("In ", MonthNames(m), ": ")
	write("production ", strfmt(getsol(Production(m)),5))
	writeln
end-do

writeln
forall(m in Months) do
	write("In ", MonthNames(m), ": ")
	write("space used ", strfmt(getsol(SpaceUsed(m)),5))
	writeln
end-do

writeln
writeln("Total Profit = £", getsol(TotalProfit))

!Report results to a .csv file for further processing in Excel
fopen("Slats4U.csv", F_OUTPUT)
	forall(p in Products) do
		writeln("Product,", p)
		forall(m in Months) write(",", MonthNames(m))
		writeln
		write("Make")
		forall(m in Months) write(",", getsol(Make(p, m)))
		writeln
		write("Stock")
		forall(m in Months) write(",", getsol(Stock(p, m)))
		writeln
		write("Sell")
		forall(m in Months) write(",", getsol(Sell(p, m)))
		writeln
		write("Unsatisfied Demand")
		forall(m in Months) write(",", getsol(Demand(p, m) - Sell(p, m)))
		writeln
	end-do
	writeln("Overall")
	write("Production")
	forall(m in Months) write(",", getsol(Production(m)))
	writeln
	write("Space used")
	forall(m in Months) write(",", getsol(SpaceUsed(m)))
	writeln

	!Consider how profits improve if production capacity is increased. 
	!
	!To do this, solve a sequence of LP problems with the constraint on production
	!capacity redefined for increasing values of "Capacity".
	!
	!Take a copy of the original value of Capacity so that the termination of the loop can be based on Capacity
	!reaching a factor of its original value
	!
	OgCapacity := Capacity
	writeln
	writeln("Capacity, NetProfit")
	repeat
		forall(m in Months) CapacityCS(m) := Production(m) <= Capacity
		maximize(TotalProfit)
		writeln(Capacity,",", getsol(TotalProfit))
		!Increase the Capacity by 10
		Capacity+=10
		!Stop repeating when Capacity is more than 50% greater than its original value
		!Note that this means that the model with Capcity equal to double its
		!original value will be solved: the next case will not
	until Capacity>4*OgCapacity
fclose(F_OUTPUT)
end-model
